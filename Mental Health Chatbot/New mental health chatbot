
import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Heart, Brain, MessageCircle, Settings, Mic, MicOff } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  type?: 'mental-health' | 'general';
}

interface ChatbotConfig {
  apiEndpoint: string;
  model: string;
  temperature: number;
  maxTokens: number;
}

const MentalHealthChatbot: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: "Hello! I'm your AI mental health companion. I'm here to listen, provide support, and answer any questions you might have. How are you feeling today?",
      sender: 'bot',
      timestamp: new Date(),
      type: 'mental-health'
    }
  ]);
  
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [config, setConfig] = useState<ChatbotConfig>({
    apiEndpoint: 'http://localhost:1234/v1/chat/completions',
    model: 'local-model',
    temperature: 0.7,
    maxTokens: 500
  });
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const recognitionRef = useRef<SpeechRecognition | null>(null);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // Initialize speech recognition if available
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = 'en-US';

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInputText(transcript);
        setIsListening(false);
      };

      recognitionRef.current.onerror = () => {
        setIsListening(false);
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
    }
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const detectMessageType = (text: string): 'mental-health' | 'general' => {
    const mentalHealthKeywords = [
      'anxious', 'anxiety', 'depressed', 'depression', 'sad', 'stressed', 'stress',
      'worried', 'fear', 'panic', 'overwhelmed', 'lonely', 'hopeless', 'tired',
      'exhausted', 'angry', 'frustrated', 'emotional', 'feeling', 'mood',
      'therapy', 'therapist', 'counseling', 'mental health', 'wellbeing'
    ];
    
    const lowerText = text.toLowerCase();
    return mentalHealthKeywords.some(keyword => lowerText.includes(keyword)) 
      ? 'mental-health' 
      : 'general';
  };

  const generateSystemPrompt = (messageType: 'mental-health' | 'general'): string => {
    if (messageType === 'mental-health') {
      return `You are a compassionate AI mental health companion. You provide emotional support, validate feelings, and offer helpful coping strategies. You are empathetic, non-judgmental, and encouraging. Always remind users that you're not a replacement for professional help when appropriate. Keep responses supportive but concise.`;
    } else {
      return `You are a helpful AI assistant that can answer general questions on various topics including science, technology, history, current events, and more. Provide accurate, informative, and concise responses.`;
    }
  };

  const callLocalLLM = async (userMessage: string, messageType: 'mental-health' | 'general'): Promise<string> => {
    try {
      const systemPrompt = generateSystemPrompt(messageType);
      
      const response = await fetch(config.apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: config.model,
          messages: [
            {
              role: 'system',
              content: systemPrompt
            },
            {
              role: 'user',
              content: userMessage
            }
          ],
          temperature: config.temperature,
          max_tokens: config.maxTokens,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      console.error('Error calling local LLM:', error);
      
      // Fallback responses
      if (messageType === 'mental-health') {
        return "I'm sorry, I'm having trouble connecting to my AI model right now. But I want you to know that I'm here for you. If you're struggling, please consider reaching out to a mental health professional or a trusted friend or family member.";
      } else {
        return "I apologize, but I'm currently unable to connect to my knowledge base. Please check your local LLM server connection and try again.";
      }
    }
  };

  const handleSendMessage = async () => {
    if (!inputText.trim()) return;

    const messageType = detectMessageType(inputText);
    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      sender: 'user',
      timestamp: new Date(),
      type: messageType
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsLoading(true);

    try {
      const botResponse = await callLocalLLM(inputText, messageType);
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: 'bot',
        timestamp: new Date(),
        type: messageType
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Error sending message:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      setIsListening(true);
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
      setIsListening(false);
    }
  };

  const quickResponses = [
    "I'm feeling anxious",
    "I need someone to talk to",
    "I'm having a bad day",
    "Can you help me relax?",
    "What's the weather like?",
    "Tell me a fun fact"
  ];

  return (
    <div className="flex flex-col h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <div className="bg-white shadow-lg p-4 flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="bg-gradient-to-r from-blue-500 to-purple-600 p-2 rounded-full">
            <Brain className="h-6 w-6 text-white" />
          </div>
          <div>
            <h1 className="text-xl font-bold text-gray-800">MindfulAI</h1>
            <p className="text-sm text-gray-600">Your AI Mental Health Companion</p>
          </div>
        </div>
        <button
          onClick={() => setShowSettings(!showSettings)}
          className="p-2 rounded-full hover:bg-gray-100 transition-colors"
        >
          <Settings className="h-5 w-5 text-gray-600" />
        </button>
      </div>

      {/* Settings Panel */}
      {showSettings && (
        <div className="bg-white border-b shadow-sm p-4">
          <h3 className="text-lg font-semibold mb-3">Local LLM Settings</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                API Endpoint
              </label>
              <input
                type="text"
                value={config.apiEndpoint}
                onChange={(e) => setConfig({...config, apiEndpoint: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-md text-sm"
                placeholder="http://localhost:1234/v1/chat/completions"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Model Name
              </label>
              <input
                type="text"
                value={config.model}
                onChange={(e) => setConfig({...config, model: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-md text-sm"
                placeholder="local-model"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Temperature ({config.temperature})
              </label>
              <input
                type="range"
                min="0"
                max="1"
                step="0.1"
                value={config.temperature}
                onChange={(e) => setConfig({...config, temperature: parseFloat(e.target.value)})}
                className="w-full"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Max Tokens
              </label>
              <input
                type="number"
                value={config.maxTokens}
                onChange={(e) => setConfig({...config, maxTokens: parseInt(e.target.value)})}
                className="w-full p-2 border border-gray-300 rounded-md text-sm"
                min="50"
                max="2000"
              />
            </div>
          </div>
        </div>
      )}

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex items-start space-x-3 ${
              message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''
            }`}
          >
            <div
              className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
                message.sender === 'user'
                  ? 'bg-blue-500'
                  : message.type === 'mental-health'
                  ? 'bg-green-500'
                  : 'bg-purple-500'
              }`}
            >
              {message.sender === 'user' ? (
                <User className="h-4 w-4 text-white" />
              ) : message.type === 'mental-health' ? (
                <Heart className="h-4 w-4 text-white" />
              ) : (
                <Bot className="h-4 w-4 text-white" />
              )}
            </div>
            <div
              className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                message.sender === 'user'
                  ? 'bg-blue-500 text-white'
                  : 'bg-white text-gray-800 shadow-md'
              }`}
            >
              <p className="text-sm">{message.text}</p>
              <p className={`text-xs mt-1 ${
                message.sender === 'user' ? 'text-blue-100' : 'text-gray-500'
              }`}>
                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
              </p>
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
              <Bot className="h-4 w-4 text-gray-600 animate-pulse" />
            </div>
            <div className="bg-white px-4 py-2 rounded-lg shadow-md">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Quick Responses */}
      <div className="p-4 bg-white border-t">
        <div className="flex flex-wrap gap-2 mb-3">
          {quickResponses.map((response, index) => (
            <button
              key={index}
              onClick={() => setInputText(response)}
              className="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full text-sm text-gray-700 transition-colors"
            >
              {response}
            </button>
          ))}
        </div>
      </div>

      {/* Input */}
      <div className="p-4 bg-white border-t">
        <div className="flex items-center space-x-2">
          <div className="flex-1 relative">
            <textarea
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Type your message here... Press Enter to send"
              className="w-full p-3 pr-20 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows={1}
              disabled={isLoading}
            />
            <div className="absolute right-2 top-2 flex items-center space-x-1">
              {recognitionRef.current && (
                <button
                  onClick={isListening ? stopListening : startListening}
                  className={`p-1.5 rounded-full transition-colors ${
                    isListening 
                      ? 'bg-red-500 hover:bg-red-600 text-white' 
                      : 'bg-gray-100 hover:bg-gray-200 text-gray-600'
                  }`}
                >
                  {isListening ? (
                    <MicOff className="h-4 w-4" />
                  ) : (
                    <Mic className="h-4 w-4" />
                  )}
                </button>
              )}
              <button
                onClick={handleSendMessage}
                disabled={!inputText.trim() || isLoading}
                className="p-1.5 bg-blue-500 hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed text-white rounded-full transition-colors"
              >
                <Send className="h-4 w-4" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MentalHealthChatbot;
